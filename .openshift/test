#!/bin/bash -eu

function check {
  if [ -d .git ]; then
    echo "  * Testing $1 ..."
    git add -A
    git commit -qmtest
    git push -q
  fi
  curl -s $url | grep -q $2 && return
  echo "  * $1 FAILED"
  exit 1
}

#create app
url=`rhc app create test "http://www.accursoft.com/cartridges/dev.yml" --noprompt -s | sed -n 's/ *URL: *//p'`
check "create app" Welcome

#tidy and force_clean_build
cd test
sed -i 's/Welcome/Greetings/' Main.hs
sed -i 's/process/process, nats/' server.cabal
touch .openshift/markers/force_clean_build
rhc app tidy test
check "build after tidy and force_clean_build" Greetings
rm .openshift/markers/force_clean_build

#jenkins
rhc cartridge add jenkins-client -a test
sed -i 's/Greetings/Howdy/' Main.hs
sed -i 's/nats/nats, stm/' server.cabal
check "jenkins build" Howdy
xdg-open `rhc cartridge remove jenkins-client -a test --confirm | sed -n 's/Job URL: //p'`delete &>/dev/null &

#cabal flags
cp Main.hs test.hs
sed -i 's/Howdy/Hello/' test.hs
echo "Flag A" >>server.cabal
sed -i 's/main-is: *Main.hs/if flag(a) {main-is:Main.hs} else {main-is:test.hs}/' server.cabal
echo "b" >.openshift/markers/cabal_flags
check "enable flags" Howdy
echo "-a" >>.openshift/markers/cabal_flags
check "unset flag" Hello
rm .openshift/markers/cabal_flags

#run_tests
touch .openshift/markers/run_tests
echo "main = return ()" >test.hs
echo "test-suite test
  type:exitcode-stdio-1.0
  main-is:test.hs
  build-depends:binding-core" >>server.cabal
sed -i 's/Howdy/Hello/' Main.hs
check "run_tests" Hello

#clear up
rhc app delete test --confirm
cd ..
rm -rf test
echo "PASSED"
