#!/bin/bash -eu

username=`docker info 2>/dev/null | grep Username | cut -c11-`
sti="file://`pwd`/sti"
gc=

function check {
  echo "  * Testing $1 ..."
  sti build . $username/ghc-network test -s $sti
  gc="$gc $(docker inspect -f '{{.Id}}' test)"
  docker run --name test -d -p 8080:8080 test
  sleep 0.01
  if curl -s localhost:8080 | grep -q $2; then
    docker rm -f test
    return
  fi
  echo "  * $1 FAILED"
  exit 1
}

#build image
cd image
./build network

#create app
cd ..
rm -rf server-test
cp -r server server-test
cd server-test
check "create app" "Welcome"

#cabal flags
cp Main.hs test.hs
sed -i 's/Welcome/Greetings/' test.hs
echo "Flag A" >>server.cabal
sed -i 's/main-is: *Main.hs/if flag(a) {main-is:Main.hs} else {main-is:test.hs}/' server.cabal
echo "b" >.sti/markers/cabal_flags
check "enable flags" "Welcome"
echo "-a" >>.sti/markers/cabal_flags
check "unset flag" "Greetings"
rm .sti/markers/cabal_flags

#run_tests
touch .sti/markers/run_tests
echo "main = return ()" >test.hs
echo "test-suite test
  type:exitcode-stdio-1.0
  main-is:test.hs
  build-depends:groups" >>server.cabal
  #check that test dependencies are installed
check "run_tests" "Welcome"
rm .sti/markers/run_tests

#hooks
echo "sed -i 's/Welcome/Greetings/' Main.hs" >.sti/hooks/before_build
chmod +x .sti/hooks/before_build
check "before_build hook" "Greetings"
rm .sti/hooks/before_build

#preserve installed packages
sed -i 's/network/network,groups/' server.cabal
check "use previously installed groups" "Welcome"

#sequential build
touch .sti/markers/sequential
check "sequential build" "Welcome"

echo "PASSED"

#clear up
cd ..
rm -r server-test
docker rmi $gc

docker run --rm $username/ghc-network cat /opt/sti/provides